package mainlibrary;

import utils.UtilLibLogger;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.IOException;
import java.sql.*;

/**
 *
 * @author bikash
 */
public class ViewBook extends javax.swing.JFrame {

    /**
     * Creates new form ViewBook
     *
     */
    private ViewBook() {
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        initComponents();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        try (Connection con = DB.getConnection()) {
            try (PreparedStatement ps = con.prepareStatement("select * from Books", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
                try (ResultSet rs = ps.executeQuery()) {
                    ResultSetMetaData rsmd = rs.getMetaData();
                    int colnum = rsmd.getColumnCount();
                    NameRadio.setSelected(true);
                    String[] row;
                    row = new String[colnum];
                    while (rs.next()) {
                        for (int i = 1; i <= colnum; i++) {
                            row[i - 1] = rs.getString(i);
                        }
                        model.addRow(row);
                    }
                } catch (SQLException e) {
                    UtilLibLogger.logMessageSEVERE(this.getClass(), e.toString());
                }
            } catch (SQLException e) {
                UtilLibLogger.logMessageSEVERE(this.getClass(), e.toString());
            }
        } catch (IOException | SQLException e) {
            UtilLibLogger.logMessageSEVERE(this.getClass(), e.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup3 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        NameRadio = new javax.swing.JRadioButton();
        SearchField = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        AuthorRadio = new javax.swing.JRadioButton();
        ALL = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Book ID", "Name", "Genre", "AuthorRadio", "Publisher", "Shelf", "row"
            }
        ) {
            final Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            final boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Ubuntu", Font.PLAIN, 24)); // NOI18N
        jLabel1.setText("Books");

        jButton1.setText("Close");
        jButton1.addActionListener(this::jButton1ActionPerformed);

        NameRadio.setText("Name");
        NameRadio.addActionListener(this::NameRadioActionPerformed);

        Search.setText("Search");
        Search.addActionListener(this::SearchActionPerformed);

        AuthorRadio.setText("Author");
        AuthorRadio.setToolTipText("");
        AuthorRadio.addActionListener(this::AuthorRadioActionPerformed);

        ALL.setText("ALL");
        ALL.addActionListener(this::ALLActionPerformed);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(958, 958, 958)
                        .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Search))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(524, 524, 524)
                        .addComponent(NameRadio)
                        .addGap(42, 42, 42)
                        .addComponent(AuthorRadio)
                        .addGap(359, 359, 359)
                        .addComponent(ALL)))
                .addContainerGap(843, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameRadio)
                    .addComponent(AuthorRadio)
                    .addComponent(ALL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(698, 698, 698)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1464, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(673, 673, 673)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unused")
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    @SuppressWarnings("unused")
    private void NameRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameRadioActionPerformed
        AuthorRadio.setSelected(false);
        ALL.setSelected(false);
    }//GEN-LAST:event_NameRadioActionPerformed

    @SuppressWarnings("unused")
    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        DefaultTableModel model;
        model = (DefaultTableModel) jTable1.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(model.getRowCount() - 1);
        }
        if (NameRadio.isSelected()) {
            String search = "%" + SearchField.getText() + "%";
            try (Connection con = DB.getConnection()) {
                try (PreparedStatement ps = con.prepareStatement("select * from Books where BookName like ?", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
                    ps.setString(1, search);
                    try (ResultSet rs = ps.executeQuery()) {
                        ResultSetMetaData rsmd = rs.getMetaData();
                        int colnum = rsmd.getColumnCount();
                        String[] row;
                        row = new String[colnum];
                        while (rs.next()) {
                            for (int i = 1; i <= colnum; i++) {
                                row[i - 1] = rs.getString(i);
                            }
                            model.addRow(row);
                        }
                        int rowcount = model.getRowCount();
                        if (rowcount == 0) {
                            String[] noRow;
                            noRow = new String[7];
                            noRow[3] = "NO";
                            noRow[4] = "RESULT";
                            noRow[0] = "";
                            noRow[1] = "";
                            noRow[2] = "";
                            noRow[5] = "";
                            noRow[6] = "";
                            model.addRow(noRow);
                        }
                    } catch (SQLException e) {
                        UtilLibLogger.logMessageSEVERE(this.getClass(), e.toString());
                    }
                } catch (SQLException e) {
                    UtilLibLogger.logMessageSEVERE(this.getClass(), e.toString());
                }
            } catch (IOException | SQLException e) {
                UtilLibLogger.logMessageSEVERE(this.getClass(), e.toString());
            }
        } else if (AuthorRadio.isSelected()) {
            String search = "%" + SearchField.getText() + "%";
            try (Connection con = DB.getConnection()) {
                try (PreparedStatement ps = con.prepareStatement("select * from Books where Author like ?", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
                    ps.setString(1, search);
                    try (ResultSet rs = ps.executeQuery()) {
                        ResultSetMetaData rsmd = rs.getMetaData();
                        int colnum = rsmd.getColumnCount();
                        String[] row;
                        row = new String[colnum];
                        while (rs.next()) {
                            for (int i = 1; i <= colnum; i++) {
                                row[i - 1] = rs.getString(i);
                            }
                            model.addRow(row);
                        }
                        int rowcount = model.getRowCount();
                        if (rowcount == 0) {
                            String[] noRow;
                            noRow = new String[7];
                            noRow[3] = "NO";
                            noRow[4] = "RESULT";
                            noRow[0] = "";
                            noRow[1] = "";
                            noRow[2] = "";
                            noRow[5] = "";
                            noRow[6] = "";
                            model.addRow(noRow);
                        }
                    } catch (SQLException e) {
                        UtilLibLogger.logMessageSEVERE(this.getClass(), e.toString());
                    }
                } catch (SQLException e) {
                    UtilLibLogger.logMessageSEVERE(this.getClass(), e.toString());
                }
            } catch (IOException | SQLException e) {
                UtilLibLogger.logMessageSEVERE(this.getClass(), e.toString());
            }
        } else {
            JOptionPane.showMessageDialog(ViewBook.this, "Select Name or Author", "No Selection!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SearchActionPerformed

    @SuppressWarnings("unused")
    private void AuthorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorRadioActionPerformed
        NameRadio.setSelected(false);
        ALL.setSelected(false);
    }//GEN-LAST:event_AuthorRadioActionPerformed

    @SuppressWarnings("unused")
    private void ALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALLActionPerformed
        NameRadio.setSelected(false);
        AuthorRadio.setSelected(false);
        SearchField.setText("");
        DefaultTableModel model;
        model = (DefaultTableModel) jTable1.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(model.getRowCount() - 1);
        }

        try (Connection con = DB.getConnection()) {
            try (PreparedStatement ps = con.prepareStatement("select * from Books", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
                try (ResultSet rs = ps.executeQuery()) {
                    ResultSetMetaData rsmd = rs.getMetaData();
                    int colnum = rsmd.getColumnCount();
                    String[] row;
                    row = new String[colnum];
                    while (rs.next()) {
                        for (int i = 1; i <= colnum; i++) {
                            row[i - 1] = rs.getString(i);
                        }
                        model.addRow(row);
                    }
                } catch (SQLException e) {
                    UtilLibLogger.logMessageSEVERE(this.getClass(), e.toString());
                }
            } catch (SQLException e) {
                UtilLibLogger.logMessageSEVERE(this.getClass(), e.toString());
            }
        } catch (IOException | SQLException e) {
            UtilLibLogger.logMessageSEVERE(this.getClass(), e.toString());
        }
    }//GEN-LAST:event_ALLActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | UnsupportedLookAndFeelException | IllegalAccessException | InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new ViewBook().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ALL;
    private javax.swing.JRadioButton AuthorRadio;
    private javax.swing.JRadioButton NameRadio;
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchField;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
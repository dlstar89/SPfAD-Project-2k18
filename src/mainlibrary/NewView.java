package mainlibrary;

import liblogger.LibLogger;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.IOException;
import java.sql.*;

/**
 *
 * @author bikash
 */
public class NewView extends javax.swing.JFrame {

    /**
     * Creates new form ViewBook
     *
     */
    private NewView() {
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);

        initComponents();
        DefaultTableModel model;
        model = (DefaultTableModel) jTable1.getModel();
        // String Data[][]=null;
        //  String Column[]=null;
        try (Connection Con = DB.getConnection()) {
            try (PreparedStatement ps = Con.prepareStatement("select IssuedBook.BookID,IssuedBook.UserID,Books.BookName , IssuedBook.IssueDate, IssuedBook.ReturnDate from Books,IssuedBook where Books.BookID=IssuedBook.BookID;", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
                try (ResultSet rs = ps.executeQuery()) {
                    ResultSetMetaData rsmd = rs.getMetaData();
                    int colnum = rsmd.getColumnCount();
                    String[] Row;
                    Row = new String[colnum];
                    while (rs.next()) {
                        for (int i = 1; i <= colnum; i++) {
                            Row[i - 1] = rs.getString(i);
                        }
                        model.addRow(Row);
                    }
                } catch (SQLException e) {
                    LibLogger.logMessageSEVERE(NewView.class, e.toString());
                }
            } catch (SQLException e) {
                LibLogger.logMessageSEVERE(NewView.class, e.toString());
            }
        } catch (IOException | SQLException e) {
            LibLogger.logMessageSEVERE(NewView.class, e.toString());
        }
    }

    private static void run() throws SQLException {
        new NewView().setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        NameRadio = new javax.swing.JRadioButton();
        BookIDRadio = new javax.swing.JRadioButton();
        ALL = new javax.swing.JRadioButton();
        SearchField = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        UserIDRadio = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Book ID","User ID", "Book Name", "Issued Date", "Return Date"
            }
        ) {
            final Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            final boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(20);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Ubuntu", Font.PLAIN, 24)); // NOI18N
        jLabel1.setText("Issued Books");

        jButton1.setText("Close");
        jButton1.addActionListener(this::jButton1ActionPerformed);

        NameRadio.setText("Name");
        NameRadio.addActionListener(this::NameRadioActionPerformed);

        BookIDRadio.setText("BookID");
        BookIDRadio.addActionListener(this::BookIDRadioActionPerformed);

        ALL.setText("ALL");
        ALL.addActionListener(this::ALLActionPerformed);

        Search.setText("Search");
        Search.addActionListener(this::SearchActionPerformed);

        UserIDRadio.setText("UserID");
        UserIDRadio.addActionListener(this::UserIDRadioActionPerformed);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(698, 698, 698)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(642, 642, 642)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1575, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(365, 365, 365)
                        .addComponent(NameRadio)
                        .addGap(47, 47, 47)
                        .addComponent(BookIDRadio)
                        .addGap(43, 43, 43)
                        .addComponent(UserIDRadio)
                        .addGap(247, 247, 247)
                        .addComponent(ALL)))
                .addContainerGap(37, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(Search)
                .addGap(464, 464, 464))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameRadio)
                    .addComponent(BookIDRadio)
                    .addComponent(ALL)
                    .addComponent(UserIDRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unused")
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code hereset
        this.dispose();
        LibrarianSuccess.ThisLogined.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    @SuppressWarnings("unused")
    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model;
        model = (DefaultTableModel) jTable1.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(model.getRowCount() - 1);
        }
        if (NameRadio.isSelected()) {
            String Search = "%" + SearchField.getText() + "%";
            try (Connection con = DB.getConnection()) {
                try (PreparedStatement ps = con.prepareStatement("select IssuedBook.BookID,IssuedBook.UserID,Books.BookName , IssuedBook.IssueDate, IssuedBook.ReturnDate from Books,IssuedBook where Books.BookID=IssuedBook.BookID and Books.BookName like ?", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
                    ps.setString(1, Search);
                    try (ResultSet rs = ps.executeQuery()) {
                        ResultSetMetaData rsmd = rs.getMetaData();
                        int colnum = rsmd.getColumnCount();
                        String[] row;
                        row = new String[colnum];
                        while (rs.next()) {
                            for (int i = 1; i <= colnum; i++) {
                                row[i - 1] = rs.getString(i);
                            }
                            model.addRow(row);
                        }
                        int rowcount = model.getRowCount();
                        if (rowcount == 0) {
                            String[] noRow;
                            noRow = new String[7];
                            noRow[1] = "NO";
                            noRow[2] = "RESULT";
                            noRow[0] = "";
                            noRow[3] = "";
                            noRow[4] = "";
                            noRow[5] = "";
                            noRow[6] = "";
                            model.addRow(noRow);
                        }
                    } catch (SQLException e) {
                        LibLogger.logMessageSEVERE(NewView.class, e.toString());
                    }
                } catch (SQLException e) {
                    LibLogger.logMessageSEVERE(NewView.class, e.toString());
                }
            } catch (IOException | SQLException e) {
                LibLogger.logMessageSEVERE(NewView.class, e.toString());
            }
        } else if (BookIDRadio.isSelected()) {
            String Search = SearchField.getText();
            int BookIDV;
            BookIDV = Integer.parseInt(Search);
            try (Connection con = DB.getConnection()) {
                try (PreparedStatement ps = con.prepareStatement("select IssuedBook.BookID,IssuedBook.UserID,Books.BookName , IssuedBook.IssueDate, IssuedBook.ReturnDate from Books,IssuedBook where Books.BookID=IssuedBook.BookID and IssuedBook.BookID=?", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
                    ps.setInt(1, BookIDV);
                    try (ResultSet rs = ps.executeQuery()) {
                        ResultSetMetaData rsmd = rs.getMetaData();
                        int colnum = rsmd.getColumnCount();
                        String[] row;
                        row = new String[colnum];
                        while (rs.next()) {
                            for (int i = 1; i <= colnum; i++) {
                                row[i - 1] = rs.getString(i);
                            }
                            model.addRow(row);
                        }
                        int rowCount = model.getRowCount();
                        if (rowCount == 0) {
                            String[] noRow;
                            noRow = new String[7];
                            noRow[1] = "NO";
                            noRow[2] = "RESULT";
                            noRow[0] = "";
                            noRow[3] = "";
                            noRow[4] = "";
                            noRow[5] = "";
                            noRow[6] = "";
                            model.addRow(noRow);
                        }
                    } catch (SQLException e) {
                        LibLogger.logMessageSEVERE(NewView.class, e.toString());
                    }
                } catch (SQLException e) {
                    LibLogger.logMessageSEVERE(NewView.class, e.toString());
                }
            } catch (IOException | SQLException e) {
                LibLogger.logMessageSEVERE(NewView.class, e.toString());
            }
        } else if (UserIDRadio.isSelected()) {
            String Search = SearchField.getText();
            int UserIDV;
            UserIDV = Integer.parseInt(Search);
            try (Connection Con = DB.getConnection()) {
                try (PreparedStatement ps = Con.prepareStatement("select IssuedBook.BookID,IssuedBook.UserID,Books.BookName , IssuedBook.IssueDate, IssuedBook.ReturnDate from Books,IssuedBook where Books.BookID=IssuedBook.BookID and IssuedBook.UserID=?", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
                    ps.setInt(1, UserIDV);
                    try (ResultSet rs = ps.executeQuery()) {
                        ResultSetMetaData rsmd = rs.getMetaData();
                        int colnum = rsmd.getColumnCount();
                        String[] row;
                        row = new String[colnum];
                        while (rs.next()) {
                            for (int i = 1; i <= colnum; i++) {
                                row[i - 1] = rs.getString(i);
                            }
                            model.addRow(row);
                        }
                        int rowCount = model.getRowCount();
                        if (rowCount == 0) {
                            String[] noRow;
                            noRow = new String[7];
                            noRow[1] = "NO";
                            noRow[2] = "RESULT";
                            noRow[0] = "";
                            noRow[3] = "";
                            noRow[4] = "";
                            noRow[5] = "";
                            noRow[6] = "";
                            model.addRow(noRow);
                        }
                    } catch (SQLException e) {
                        LibLogger.logMessageSEVERE(NewView.class, e.toString());
                    }
                } catch (SQLException e) {
                    LibLogger.logMessageSEVERE(NewView.class, e.toString());
                }
            } catch (IOException | SQLException e) {
                LibLogger.logMessageSEVERE(NewView.class, e.toString());
            }
        } else {

            JOptionPane.showMessageDialog(NewView.this, "Select Name or Author", "No Selection!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SearchActionPerformed

    @SuppressWarnings("unused")
    private void BookIDRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookIDRadioActionPerformed
        // TODO add your handling code here:
        NameRadio.setSelected(false);
        ALL.setSelected(false);
        UserIDRadio.setSelected(false);
    }//GEN-LAST:event_BookIDRadioActionPerformed

    @SuppressWarnings("unused")
    private void NameRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameRadioActionPerformed
        // TODO add your handling code here:
        BookIDRadio.setSelected(false);
        ALL.setSelected(false);
        UserIDRadio.setSelected(false);

    }//GEN-LAST:event_NameRadioActionPerformed

    @SuppressWarnings("unused")
    private void ALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALLActionPerformed
        // TODO add your handling code here:
        SearchField.setText("");
        DefaultTableModel model;
        model = (DefaultTableModel) jTable1.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(model.getRowCount() - 1);
        }

        try (Connection Con = DB.getConnection()) {
            try (PreparedStatement ps = Con.prepareStatement("select IssuedBook.BookID,IssuedBook.UserID,Books.BookName , IssuedBook.IssueDate, IssuedBook.ReturnDate from Books,IssuedBook where Books.BookID=IssuedBook.BookID;", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
                try (ResultSet rs = ps.executeQuery()) {
                    ResultSetMetaData rsmd = rs.getMetaData();
                    int colnum = rsmd.getColumnCount();
                    String[] row;
                    row = new String[colnum];
                    while (rs.next()) {
                        for (int i = 1; i <= colnum; i++) {
                            row[i - 1] = rs.getString(i);
                        }
                        model.addRow(row);
                    }
                } catch (SQLException e) {
                    LibLogger.logMessageSEVERE(NewView.class, e.toString());
                }
            } catch (SQLException e) {
                LibLogger.logMessageSEVERE(NewView.class, e.toString());
            }
        } catch (IOException | SQLException e) {
            LibLogger.logMessageSEVERE(NewView.class, e.toString());
        }
    }//GEN-LAST:event_ALLActionPerformed

    @SuppressWarnings("unused")
    private void UserIDRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserIDRadioActionPerformed
        // TODO add your handling code here:
        ALL.setSelected(false);
        NameRadio.setSelected(false);
        BookIDRadio.setSelected(false);
    }//GEN-LAST:event_UserIDRadioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | UnsupportedLookAndFeelException | IllegalAccessException | InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                run();
            } catch (SQLException e) {
                LibLogger.logMessageSEVERE(NewView.class, e.toString());
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ALL;
    private javax.swing.JRadioButton BookIDRadio;
    private javax.swing.JRadioButton NameRadio;
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchField;
    private javax.swing.JRadioButton UserIDRadio;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
